// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? //@db.Text
    access_token             String? //@db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? //@db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int? // for github

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    forms         Form[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Form {
    id          String     @id @default(cuid())
    title       String
    description String?
    user        User       @relation(fields: [userId], references: [id])
    userId      String
    questions   Question[]
    responses   Response[]
    design      Design     @relation(fields: [designId], references: [id])
    designId    String     @unique
}

model Question {
    id                     String                  @id @default(cuid())
    text                   String
    description            String?
    alias                  String?
    type                   String
    form                   Form                    @relation(fields: [formId], references: [id])
    formId                 String
    required               Boolean
    category               String
    order                  Int
    visible                Boolean
    imageUrl               String?
    imageFit               String?
    options                Option[]
    branches               Branch[]
    targets                Branch[]                @relation("Target")
    responses              Response[]
    textQuestion           TextQuestion?
    numberQuestion         NumberQuestion?
    addressQuestion        AddressQuestion?
    contactQuestion        ContactQuestion?
    matrixQuestion         MatrixQuestion?
    opinionScaleQuestion   OpinionScaleQuestion?
    ratingQuestion         RatingQuestion?
    rankingQuestion        RankingQuestion?
    multipleChoiceQuestion MultipleChoiceQuestion?
    dropdownQuestion       DropdownQuestion?
    dateTimeQuestion       DateTimeQuestion?
}

// text 
model TextQuestion {
    id         String   @id @default(cuid())
    question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
    questionId String   @unique
    subType    String // text, statement, email, phone, website
}

model AddressQuestion {
    id              String   @id @default(cuid())
    question        Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
    questionId      String   @unique
    line1Required   Boolean
    line2Required   Boolean
    cityRequired    Boolean
    stateRequired   Boolean
    zipRequired     Boolean
    countryRequired Boolean
}

model ContactQuestion {
    id                String   @id @default(cuid())
    question          Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
    questionId        String   @unique
    firstNameRequired Boolean
    lastNameRequired  Boolean
    emailRequired     Boolean
    phoneRequired     Boolean
    companyRequired   Boolean
}

model NumberQuestion {
    id         String   @id @default(cuid())
    question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
    questionId String   @unique
    subType    String // number, currency, percentage
    min        Int?
    max        Int?
}

model DateTimeQuestion {
    id          String   @id @default(cuid())
    question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
    questionId  String   @unique
    includeTime Boolean
}

model OpinionScaleQuestion {
    id          String   @id @default(cuid())
    question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
    questionId  String   @unique
    min         Int
    max         Int
    startLabel  String?
    middleLabel String?
    endLabel    String?
}

model RatingQuestion {
    id         String   @id @default(cuid())
    question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
    questionId String   @unique
    outOf      Int
    type       String // star, heart, thumb, smiley
}

model RankingQuestion {
    id         String   @id @default(cuid())
    question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
    questionId String   @unique
    options    Option[]
}

model MatrixQuestion {
    id         String   @id @default(cuid())
    question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
    questionId String   @unique
    rows       Row[]
    columns    Column[]
}

model Row {
    id               String         @id @default(cuid())
    text             String
    matrixQuestion   MatrixQuestion @relation(fields: [matrixQuestionId], references: [id])
    matrixQuestionId String
}

model Column {
    id               String         @id @default(cuid())
    text             String
    matrixQuestion   MatrixQuestion @relation(fields: [matrixQuestionId], references: [id])
    matrixQuestionId String
}

model DropdownQuestion {
    id         String   @id @default(cuid())
    question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
    questionId String   @unique
    options    Option[]
    sort       String? // asc, desc, random
}

model MultipleChoiceQuestion {
    id            String   @id @default(cuid())
    question      Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
    questionId    String   @unique
    options       Option[]
    allowMultiple Boolean
    minSelections Int?
    maxSelections Int?
    allowOther    Boolean
    sort          String? // asc, desc, random
    layout        String? // vertical, horizontal
}

model Option {
    id                       String                  @id @default(cuid())
    text                     String
    question                 Question                @relation(fields: [questionId], references: [id])
    questionId               String
    multipleChoiceQuestion   MultipleChoiceQuestion? @relation(fields: [multipleChoiceQuestionId], references: [id])
    multipleChoiceQuestionId String?
    rankingQuestion          RankingQuestion?        @relation(fields: [rankingQuestionId], references: [id])
    rankingQuestionId        String?
    dropdownQuestion         DropdownQuestion?       @relation(fields: [dropdownQuestionId], references: [id])
    dropdownQuestionId       String?
}

model Branch {
    id         String    @id @default(cuid())
    question   Question  @relation(fields: [questionId], references: [id])
    questionId String
    condition  String // Store the condition as a string (e.g., "age > 18")
    targetId   String?
    target     Question? @relation("Target", fields: [targetId], references: [id])
}

model Response {
    id         String   @id @default(cuid())
    form       Form     @relation(fields: [formId], references: [id])
    formId     String
    question   Question @relation(fields: [questionId], references: [id])
    questionId String
    answer     String //Json
    createdAt  DateTime
    updatedAt  DateTime
}

model Design {
    id              String   @id @default(cuid())
    name            String
    fontFamily      String
    fontSize        Int
    textColor       String
    backgroundColor String
    borderColor     String
    borderRadius    Int
    buttonColor     String
    buttonHover     String
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    form            Form?
}
