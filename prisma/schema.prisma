// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?  //@db.Text
    access_token             String?  //@db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?  //@db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int? // for github

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String     @id @default(cuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    forms         Form[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Form {
    id          Int        @id @default(autoincrement())
    title       String
    description String?
    user        User       @relation(fields: [userId], references: [id])
    userId      String
    questions   Question[]
    responses   Response[]
}

model Question {
    id        Int        @id @default(autoincrement())
    text      String
    type      String
    order     Int
    form      Form       @relation(fields: [formId], references: [id])
    formId    Int
    options   Option[]
    logic     Logic[]
    responses Response[]
}

model Option {
    id         Int      @id @default(autoincrement())
    text       String
    question   Question @relation(fields: [questionId], references: [id])
    questionId Int
}

model Logic {
    id         Int      @id @default(autoincrement())
    question   Question @relation(fields: [questionId], references: [id])
    questionId Int
    field      String
    operator   String
    value      String
    targetId   Int
}

model Response {
    id         Int      @id @default(autoincrement())
    form       Form     @relation(fields: [formId], references: [id])
    formId     Int
    question   Question @relation(fields: [questionId], references: [id])
    questionId Int
    answer     String //Json
}
